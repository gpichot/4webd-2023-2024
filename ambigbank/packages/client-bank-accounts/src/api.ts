/* tslint:disable */
/* eslint-disable */
/**
 * AM BigBank Bank Accounts Microservice API
 * The BigBank Bank Accounts Microservice API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateBankAccountDto
 */
export interface CreateBankAccountDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBankAccountDto
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface DepositDto
 */
export interface DepositDto {
    /**
     * 
     * @type {string}
     * @memberof DepositDto
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof DepositDto
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface PrivateBankAccountDto
 */
export interface PrivateBankAccountDto {
    /**
     * 
     * @type {string}
     * @memberof PrivateBankAccountDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PrivateBankAccountDto
     */
    'title': string;
    /**
     * 
     * @type {object}
     * @memberof PrivateBankAccountDto
     */
    'balance': object;
    /**
     * 
     * @type {string}
     * @memberof PrivateBankAccountDto
     */
    'userId': string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create bank account
         * @param {CreateBankAccountDto} createBankAccountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateBankAccount: async (createBankAccountDto: CreateBankAccountDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBankAccountDto' is not null or undefined
            assertParamExists('bankAccountsControllerCreateBankAccount', 'createBankAccountDto', createBankAccountDto)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBankAccountDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deposit
         * @param {DepositDto} depositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDeposit: async (depositDto: DepositDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositDto' is not null or undefined
            assertParamExists('bankAccountsControllerDeposit', 'depositDto', depositDto)
            const localVarPath = `/accounts/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get bank account by ID
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccount: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('bankAccountsControllerGetBankAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List bank accounts
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListBankAccounts: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create bank account
         * @param {CreateBankAccountDto} createBankAccountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsControllerCreateBankAccount(createBankAccountDto: CreateBankAccountDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrivateBankAccountDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsControllerCreateBankAccount(createBankAccountDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.bankAccountsControllerCreateBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deposit
         * @param {DepositDto} depositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsControllerDeposit(depositDto: DepositDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateBankAccountDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsControllerDeposit(depositDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.bankAccountsControllerDeposit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get bank account by ID
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsControllerGetBankAccount(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateBankAccountDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsControllerGetBankAccount(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.bankAccountsControllerGetBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List bank accounts
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsControllerListBankAccounts(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrivateBankAccountDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsControllerListBankAccounts(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.bankAccountsControllerListBankAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create bank account
         * @param {CreateBankAccountDto} createBankAccountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateBankAccount(createBankAccountDto: CreateBankAccountDto, options?: any): AxiosPromise<Array<PrivateBankAccountDto>> {
            return localVarFp.bankAccountsControllerCreateBankAccount(createBankAccountDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deposit
         * @param {DepositDto} depositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDeposit(depositDto: DepositDto, options?: any): AxiosPromise<PrivateBankAccountDto> {
            return localVarFp.bankAccountsControllerDeposit(depositDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get bank account by ID
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccount(accountId: string, options?: any): AxiosPromise<PrivateBankAccountDto> {
            return localVarFp.bankAccountsControllerGetBankAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List bank accounts
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListBankAccounts(userId?: string, options?: any): AxiosPromise<Array<PrivateBankAccountDto>> {
            return localVarFp.bankAccountsControllerListBankAccounts(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @summary Create bank account
     * @param {CreateBankAccountDto} createBankAccountDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public bankAccountsControllerCreateBankAccount(createBankAccountDto: CreateBankAccountDto, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).bankAccountsControllerCreateBankAccount(createBankAccountDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deposit
     * @param {DepositDto} depositDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public bankAccountsControllerDeposit(depositDto: DepositDto, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).bankAccountsControllerDeposit(depositDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get bank account by ID
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public bankAccountsControllerGetBankAccount(accountId: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).bankAccountsControllerGetBankAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List bank accounts
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public bankAccountsControllerListBankAccounts(userId?: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).bankAccountsControllerListBankAccounts(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



